
Write the following SQL query:
Find the name of the user who has rated the greatest number of movies. In case of a tie, return lexicographically smaller user name.
Find the movie name with the highest average rating in February 2020. In case of a tie, return lexicographically smaller movie name.
The query is returned in 2 rows, the query result format is in the following example:

Movies table:
+-------------+--------------+
| movie_id    |  title       |
+-------------+--------------+
| 1           | Avengers     |
| 2           | Frozen 2     |
| 3           | Joker        |
+-------------+--------------+

Users table:
+-------------+--------------+
| user_id     |  name        |
+-------------+--------------+
| 1           | Daniel       |
| 2           | Monica       |
| 3           | Maria        |
| 4           | James        |
+-------------+--------------+

Movie_Rating table:
+-------------+--------------+--------------+-------------+
| movie_id    | user_id      | rating       | created_at  |
+-------------+--------------+--------------+-------------+
| 1           | 1            | 3            | 2020-01-12  |
| 1           | 2            | 4            | 2020-02-11  |
| 1           | 3            | 2            | 2020-02-12  |
| 1           | 4            | 1            | 2020-01-01  |
| 2           | 1            | 5            | 2020-02-17  | 
| 2           | 2            | 2            | 2020-02-01  | 
| 2           | 3            | 2            | 2020-03-01  |
| 3           | 1            | 3            | 2020-02-22  | 
| 3           | 2            | 4            | 2020-02-25  | 
+-------------+--------------+--------------+-------------+

Result table:
+--------------+
| results      |
+--------------+
| Daniel       |
| Frozen 2     |
+--------------+

Daniel and Monica have rated 3 movies ("Avengers", "Frozen 2" and "Joker") but Daniel is smaller lexicographically. 
Frozen 2 and Joker have a rating average of 3.5 in February but Frozen 2 is smaller lexicographically.

ANSWER :--

SELECT name FROM 
(
   SELECT u.name name, count(*) total 
   FROM users u, movie_rating mr 
   WHERE u.user_id=mr.user_id
   GROUP BY u.name
) 
ORDER BY total desc, name 
LIMIT 1

UNION

SELECT title FROM 
(
  SELECT m.title title, AVG(mr.rating) average 
  FROM movies m,  movie_rating mr 
  WHERE m.movie_id=mr.movie_id 
    AND created_at BETWEEN '2020-02' and '2020-03' 
  GROUP BY title
) 
ORDER BY average desc, title 
LIMIT  1;


## Construct the aggregate number with the name in the inside query, then sort and pick the top in the outside query




